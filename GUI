import viz
import viztracker
import vizinput
import vizshape
import vizcam
import vizmenu
import vizinfo
import viztask


modelIsLoaded = False
birdEyeViewIsActivated = False
checkPointsVisible = False
checkPointsList = []


viz.MainWindow.fov(60)

#Menübar
menubar = vizmenu.add()
menubar.setVisible(False)

#Bearbeiten
BearbeitenMenu = menubar.add("Bearbeiten")
buttonDateiOeffnen = BearbeitenMenu.add(viz.BUTTON_LABEL, "Datei öffnen")
buttonModelEntfernen = BearbeitenMenu.add(viz.BUTTON_LABEL, "Model entfernen")

#Ansicht DropDown
AnsichtsMenu = menubar.add("Ansicht")
checkRohre = AnsichtsMenu.add(viz.CHECKBOX, "Rohre")
checkWaende = AnsichtsMenu.add(viz.CHECKBOX, "Wände")
checkBirdEyeView = AnsichtsMenu.add(viz.CHECKBOX, "Vogelperspektive")
checkPointsView = AnsichtsMenu.add(viz.CHECKBOX, "Checkpoints")
checkPointSetzen = AnsichtsMenu.add(viz.BUTTON_LABEL, "Checkpoint setzen")
checkPointLoeschen = AnsichtsMenu.add(viz.BUTTON_LABEL, "Checkpoint löschen")
portButton = AnsichtsMenu.add(viz.BUTTON_LABEL, "Porten")


#Einfügen DropDown
EinfuegenMenu = menubar.add("Einfügen")
buttonNotizEinfuegen = EinfuegenMenu.add(viz.BUTTON_LABEL, "Notiz")

#Optionen DropDown
OptionenMenu = menubar.add("Optionen")

#Alphawert
alphaSlider = AnsichtsMenu.add(viz.SLIDER, "Alphawert")
alphaSlider.set(1.0)

#Steuerung
viz.mouse(viz.OFF)
viz.mouse.setTrap()
tracker = vizcam.addWalkNavigate(moveScale=2.0)
tracker.setPosition([0,1.8,0])
link = viz.link(tracker,viz.MainView)
viz.mouse.setVisible(False)

#Erstes Model laden
model = viz.addChild(r'C:\Users\pasca_000\Downloads\CADModellHofner.obj')
modelIsLoaded = True
model.disable(viz.CULL_FACE)
model.setPosition(0,0,60, viz.ABS_GLOBAL)
model.setEuler([0,0,0])
viz.collision(viz.ON)

#Boden laden
ground1 = viz.addChild('ground.osgb')
ground2 = viz.addChild('ground.osgb')
ground2.setPosition(0,0,50)

#Bekomme Slider Position
def sliderPosition(slider):
  return slider.get()
	
#Setze Alphawert
def setAlpha(slider):
	alpha = sliderPosition(slider)
	model.alpha(alpha)
	
#Lade neues Model
def setModel (path):
	global model
	global modelIsLoaded
	if not (modelIsLoaded):
		model = viz.addChild(path)
		model.disable(viz.CULL_FACE)
		model.setPosition(0,0,60, viz.ABS_GLOBAL)
		model.setEuler([0,0,0])
		alphaSlider.set(1.0)
		modelIsLoaded = True

#Lösche Model		
def deleteModel():
	global modelIsLoaded
	model.remove()
	modelIsLoaded = False

#Setze Text an eigener Position
def openTextBox():
	#Erschaffe Textbox
	textBox = viz.addTextbox()
	textBox.setPosition(0.5,0.5)
	textBox.overflow(viz.OVERFLOW_GROW)
	
	#Erschaffe Bestätigungsbutton
	bestaetigeButton = viz.addButtonLabel("OK")
	bestaetigeButton.setPosition(0.5,0.45)
	bestaetigeButton.setScale(1,1)
	
	#Text schreiben und Box + Button löschen
	def writeText():
		text = textBox.get()
		userPosition = viz.MainView.getPosition()
		text3D = viz.addText3D(text, pos = [userPosition[0]-0.2, userPosition[1], userPosition[2] + 0.2])
		text3D.setScale(0.2, 0.2, 0.2)
		text3D.color(viz.RED)
		textBox.remove()
		bestaetigeButton.remove()
	vizact.onbuttondown(bestaetigeButton, writeText)	
	
#Vogelperspektive
def enableBirdEyeView():
	global birdEyeViewIsActivated
	global BirdEyeWindow
	if not (birdEyeViewIsActivated):
		BirdEyeWindow = viz.addWindow()
		BirdEyeWindow.fov(60)
		BirdEyeView = viz.addView()
		BirdEyeWindow.setView(BirdEyeView)
		link = viz.link( viz.MainView, BirdEyeView)
		link.preEuler([0,90,0])
		link.postTrans([0,30,0])
		birdEyeViewIsActivated = True
	else:
		BirdEyeWindow.remove()
		birdEyeViewIsActivated = False

#aktiviere/deaktiviere Mauszeiger
def enableDisableMouse():
	global euler
	if viz.mouse.getVisible():
		tracker.setEuler(euler)
		link.enable()
		viz.mouse.setVisible(False)
		menubar.setVisible(False)
	else:
		euler = tracker.getEuler()
		link.disable()
		viz.mouse.setVisible(True)
		menubar.setVisible(True)
		
#Checkpointliste Fenster
def checkPoints():
	global checkPointsVisible
	global checkPointsPanel

	if not checkPointsVisible: #Falls Checkboxfenster nicht 
		message = ""	# sichtbar, checkpoints auslesen und ausgeben
		checkPointZaehler = 1
		for a in checkPointsList: #Checkpoints zusammenschreiben
			message += str (checkPointZaehler) + ". " + str (a) + "\n"
			checkPointZaehler += 1
		checkPointsPanel = vizinfo.InfoPanel("Checkpoints:\n" + message,align=viz.ALIGN_CENTER,fontSize=25,icon=False,key=None)
		checkPointsVisible = True
		checkPointsPanel.visible(True)
	else: #Falls Checkboxfenster sichtbar, unsichtbar machen
		checkPointsVisible = False
		checkPointsPanel.visible(False)

#Checkpoint erstellen/speichern
def createCheckpoint():
	userPosition = viz.MainView.getPosition() #Frage User Position
	#Füge Checkpoint zur Liste auf 3 Nachkommastellen gerundet an
	checkPointsList.append([round(userPosition[0],3), round(userPosition[1],3), round(userPosition[2],3)])
		
#Lösche Checkpoint
def deleteCheckpoint():
	#Erschaffe Textbox
	textBox = viz.addTextbox()
	textBox.setPosition(0.5,0.5)
	textBox.overflow(viz.OVERFLOW_GROW)
	
	#Erschaffe Bestätigungsbutton
	bestaetigeButton = viz.addButtonLabel("Löschen")
	bestaetigeButton.setPosition(0.5,0.45)
	bestaetigeButton.setScale(1,1)
	
	#Checkpoint löschen und Box + Button löschen
	def deleteCheckpoint1():

		checkpointnummer = textBox.get()
		bestaetigeButton.remove()
		textBox.remove()
		
		def removeCheckPointsPanel():
			checkPointsPanel.remove()
			okButton.remove()
				
		try:
			if (int(checkpointnummer)>0):
				del checkPointsList[int (checkpointnummer)-1] #Lösche Checkpoint
			else:
				raise
		except:
			checkPointsPanel = vizinfo.InfoPanel("Bitte nur Nummern im Bereich\nder verfügbaren Checkpoints eingeben.",align=viz.ALIGN_CENTER,fontSize=25,icon=False,key=None)
			checkPointsPanel.visible(True)
			#Erschaffe Bestätigungsbutton
			okButton = viz.addButtonLabel("Ok")
			okButton.setPosition(0.5,0.40)
			okButton.setScale(1,1)
			vizact.onbuttondown(okButton,removeCheckPointsPanel)
	vizact.onbuttondown(bestaetigeButton, deleteCheckpoint1)	

#Zu Checkpoints porten
def portCheckPoint():
	#Erschaffe Textbox
	portBox = viz.addTextbox()
	portBox.setPosition(0.5,0.5)
	portBox.overflow(viz.OVERFLOW_GROW)
	
	#Erschaffe Bestätigungsbutton
	portButton1 = viz.addButtonLabel("Porten")
	portButton1.setPosition(0.5,0.45)
	portButton1.setScale(1,1)
	
	def porten():
		#Position abfragen und textbox + button entfernen
		checkPointNummer = portBox.get()
		portButton1.remove()
		portBox.remove()
		
		def removeCheckPointsPanel():
			checkPointsPanel.remove()
			okButton.remove()
		
		try:
			if (int(checkPointNummer)>0): #Prüfe eingabe und porte
				position = checkPointsList[int(checkPointNummer)-1]
				viz.MainView.setPosition(position[0], position[1], position[2])
				tracker.setPosition(position[0], position[1], position[2])
			else:
				raise
		except:
			checkPointsPanel = vizinfo.InfoPanel("Bitte nur Nummern im Bereich\nder verfügbaren Checkpoints eingeben.",align=viz.ALIGN_CENTER,fontSize=25,icon=False,key=None)
			checkPointsPanel.visible(True)
			#Erschaffe Bestätigungsbutton
			okButton = viz.addButtonLabel("Ok")
			okButton.setPosition(0.5,0.40)
			okButton.setScale(1,1)
			vizact.onbuttondown(okButton,removeCheckPointsPanel)
			
	vizact.onbuttondown(portButton1, porten)
	
		
#Button Definition
vizact.onbuttondown(buttonDateiOeffnen, setModel, r'C:\Users\pasca_000\Downloads\CADModellHofner.obj' )
vizact.onbuttondown(buttonModelEntfernen, deleteModel)
vizact.onbuttondown(buttonNotizEinfuegen, openTextBox)
vizact.onbuttondown(checkBirdEyeView, enableBirdEyeView)
vizact.onbuttonup(checkBirdEyeView, enableBirdEyeView)
vizact.onbuttondown(checkPointsView, checkPoints)
vizact.onbuttonup(checkPointsView, checkPoints)
vizact.onbuttondown(checkPointSetzen, createCheckpoint)
vizact.onbuttondown(checkPointLoeschen, deleteCheckpoint)
vizact.onbuttondown(portButton, portCheckPoint)

#Shortcuts
vizact.onkeydown(viz.KEY_CONTROL_L, enableDisableMouse)

#Alphawert aktualisieren
vizact.ontimer(0.1, setAlpha, alphaSlider )

viz.go()
